const char* fragmentShaderSource2 = R"(
#version 330 core
out vec4 FragColor;
uniform vec2 u_resolution;
uniform vec2 u_offset;
uniform float u_zoom;
uniform vec2 u_c;
const int MAX_ITER = 2000;
const int NUM_SAMPLES = 4;
uniform float c_parameter_r;
uniform float c_parameter_g;
uniform float c_parameter_b;

int julia(vec2 z) {
    int iterations = 0;
    for (int i = 0; i < MAX_ITER; i++) {
        if (length(z) > 2.0) break;
        float xTemp = z.x * z.x - z.y * z.y + u_c.x;
        z.y = 2.0 * z.x * z.y + u_c.y;
        z.x = xTemp;
        iterations++;
    }
    return iterations;
}

void main() {
    vec2 coord = (gl_FragCoord.xy / u_resolution - 0.5) * u_zoom + u_offset;

    // Supersampling offsets
    vec2 offsets[NUM_SAMPLES] = vec2[](
        vec2(-0.25, -0.25), vec2(0.25, -0.25),
        vec2(-0.25, 0.25), vec2(0.25, 0.25)
    );

    // Accumulate color over multiple samples
    vec3 color = vec3(0.0);
    for (int i = 0; i < NUM_SAMPLES; i++) {
        vec2 sampleCoord = coord + (offsets[i] / u_resolution) * u_zoom;
        int iterations = julia(sampleCoord);
        float t = float(iterations) / MAX_ITER;
        //color += vec3(t * 9.0 * c_parameter_r, t * t * 15.0 * c_parameter_g, t * t * t * 8.5 * c_parameter_b);

        color += vec3(t * 9.0 * c_parameter_r/2, t * 9.0 * c_parameter_g/2, t * 9.0 * c_parameter_b/2);
        if (iterations == MAX_ITER) color += vec3(0.0);
    }

    // Average the color
    color /= float(NUM_SAMPLES);

    FragColor = vec4(color, 1.0);
}
)";